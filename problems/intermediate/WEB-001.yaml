# Req2Run Problem: Todo REST API
# This problem tests the ability to generate a complete REST API with authentication
# Using RFC 2119 (MUST/SHOULD/MAY) and EARS syntax for requirements

id: WEB-001
title: "Todo REST API with JWT Authentication"
difficulty: intermediate
category: web_api
estimated_time_minutes: 30
languages: 
  - python
  - javascript
  - typescript
  - go

requirements:
  functional:
    # EARS Syntax: <optional preconditions> <optional trigger> the <system name> shall <system response>
    - id: FR-001
      description: "WHEN a client sends a valid request, the API SHALL implement CRUD operations for /todos endpoint"
      priority: MUST  # RFC 2119: Absolute requirement
      validation:
        type: api_test
        endpoint: /todos
        methods: [GET, POST, PUT, DELETE]
        expected_response:
          status: 200
          content_type: application/json
    
    - id: FR-002
      description: "WHERE the API returns a response, the API SHALL format all responses as JSON with Content-Type: application/json"
      priority: MUST  # RFC 2119: Absolute requirement
      validation:
        type: integration_test
        check: response_format
    
    - id: FR-003
      description: "WHEN a user provides valid credentials to /auth/login, the API SHALL return a valid JWT token"
      priority: MUST  # RFC 2119: Absolute requirement
      validation:
        type: api_test
        endpoint: /auth/login
        method: POST
        expected_response:
          status: 200
          body:
            access_token: string
            token_type: bearer
    
    - id: FR-004
      description: "Todo items MUST have fields: id, title, description, completed, created_at, updated_at"
      priority: MUST
      validation:
        type: unit_test
    
    - id: FR-005
      description: "WHEN retrieving todos, the API SHOULD implement pagination with page and limit parameters"
      priority: SHOULD  # RFC 2119: Recommended but not mandatory
      validation:
        type: api_test
        endpoint: /todos?page=1&limit=10
        expected_fields: [items, total, page, pages]
    
    - id: FR-006
      description: "IF the implementation chooses, the API MAY implement filtering by completion status"
      priority: MAY  # RFC 2119: Optional feature
      validation:
        type: api_test
        endpoint: /todos?completed=true
    
    - id: FR-007
      description: "WHILE processing requests, the API SHALL enforce rate limiting of 100 requests per minute per IP"
      priority: SHOULD  # RFC 2119: Strong recommendation
      validation:
        type: performance_test
        rate_limit: 100
        window: 60
  
  non_functional:
    performance:
      p95_latency_ms: 200  # MUST meet this latency at 95th percentile
      p99_latency_ms: 500  # SHOULD meet this latency at 99th percentile
      throughput_rps: 100  # MUST support at least 100 req/sec
      concurrent_users: 50  # MUST handle 50 concurrent users
      cpu_limit: "2000m"  # 2 CPU cores max
      memory_limit: "512Mi"  # 512MB RAM max
    
    security:
      network_egress: DENY  # MUST NOT make external network calls
      secrets_in_code: FORBIDDEN  # MUST NOT hardcode secrets
      authentication: jwt  # MUST use JWT authentication
      authorization: true  # MUST implement user-specific access control
      encryption: tls  # SHOULD support TLS in production
    
    quality:
      max_cyclomatic_complexity: 10
      min_test_coverage: 80
      documentation_required: true
      type_hints_required: true

constraints:
  allowed_packages:
    - fastapi
    - uvicorn
    - pydantic
    - sqlalchemy
    - pytest
    - httpx
    - python-jose
    - passlib
    - python-multipart
  
  disallowed_packages:
    - requests  # Use httpx instead
    - urllib3   # Use httpx instead
  
  disallowed_syscalls:  # Enforced by nsjail/firejail sandbox
    - mount  # MUST NOT mount filesystems
    - setuid  # MUST NOT change user ID
    - setgid  # MUST NOT change group ID
    - chroot  # MUST NOT change root directory
  
  resource_limits:
    max_cpu_cores: 2
    max_memory_gb: 1
    max_disk_gb: 5
    max_network_bandwidth_mbps: 10
  
  time_limits:
    generation_minutes: 30
    execution_minutes: 5

artifacts:
  entrypoint: "main:app"
  dockerfile: "templates/python-fastapi.dockerfile"
  healthcheck: "/health"
  config_files:
    - ".env.example"
    - "requirements.txt"

tests:
  unit: "tests/web_001_unit.py"
  integration: "tests/web_001_integration.py"
  performance: "tests/web_001_performance.py"
  security: "tests/web_001_security.py"
  property: "tests/web_001_property.py"
  test_data:
    input_files:
      - "test_data/todos_sample.json"
      - "test_data/users_sample.json"
    expected_outputs:
      - "test_data/expected_responses.json"

metrics:
  weights:  # Fixed formula as per metrics.md v1.0.0
    functional_coverage: 0.35  # Coverage of MUST requirements
    test_pass_rate: 0.25  # Overall test success rate
    performance: 0.15  # Latency, throughput, resource usage
    code_quality: 0.15  # Complexity, coverage, style
    security: 0.10  # Static analysis + runtime compliance
  
  thresholds:
    min_functional_coverage: 100  # All MUST requirements
    min_pass_rate: 80
    min_performance_score: 70

pass_criteria:
  min_total_score: 0.70
  mandatory_requirements:
    - FR-001  # CRUD operations
    - FR-002  # JSON responses
    - FR-003  # JWT authentication
    - FR-004  # Todo schema
  forbidden_violations:
    - critical_security
    - runtime_failure
    - sandbox_escape

# Reference implementation available
reference_solution:
  available: true
  path: "baselines/WEB-001/"
  expected_score: 0.85  # Reference should achieve 85%
  performance_baseline:
    p95_latency_ms: 120
    throughput_rps: 150
    memory_mb: 256

metadata:
  author: "ITdo Inc. Japan"
  created_date: "2024-01-15"
  last_modified: "2024-01-15T10:00:00Z"
  version: "1.1.0"  # Updated with RFC 2119 and EARS
  tags:
    - web
    - api
    - rest
    - authentication
    - jwt
    - todo
  references:
    - title: "REST API Design Best Practices"
      url: "https://restfulapi.net/"
    - title: "JWT Authentication"
      url: "https://jwt.io/introduction"
    - title: "FastAPI Documentation"
      url: "https://fastapi.tiangolo.com/"
  notes: |
    This problem tests the ability to create a production-ready REST API with:
    - Proper authentication and authorization
    - Database persistence (SQLite is acceptable)
    - Input validation and error handling
    - Performance optimization
    - Security best practices
    - Comprehensive testing