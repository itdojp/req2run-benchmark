version: '3.8'

services:
  # PostgreSQL database for submissions requiring database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: req2run
      POSTGRES_PASSWORD: req2run_pass
      POSTGRES_DB: req2run_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - req2run_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U req2run"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - req2run_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Evaluation orchestrator
  evaluator:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile.evaluator
      target: python-base
    volumes:
      - ./problems:/opt/req2run/problems:ro
      - ./submissions:/workspace/submissions
      - ./results:/results
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      DATABASE_URL: postgresql://req2run:req2run_pass@postgres:5432/req2run_db
      REDIS_URL: redis://redis:6379
      EVALUATION_TIMEOUT: 3600
      LOG_LEVEL: INFO
    networks:
      - req2run_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Sandbox environment for running submissions
  sandbox:
    image: alpine:latest
    command: sleep infinity
    networks:
      - req2run_sandbox
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: true
    tmpfs:
      - /tmp
      - /var/tmp
    mem_limit: 2g
    cpus: 2
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - req2run_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: redis-datasource
    networks:
      - req2run_network
    depends_on:
      - prometheus

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: ":9411"
    networks:
      - req2run_network

networks:
  req2run_network:
    driver: bridge
  req2run_sandbox:
    driver: bridge
    internal: true

volumes:
  postgres_data:
  prometheus_data:
  grafana_data: