id: WEB-012
title: "Rate Limiting and Retry Design with Idempotency Keys"
difficulty: advanced
category: web_api
languages:
  - python
  - javascript
  - go
  - java

requirements:
  functional:
    - id: FR-001
      description: "The API MUST implement idempotency keys for payment endpoints"
      priority: MUST
      validation:
        type: integration_test
    
    - id: FR-002
      description: "The API MUST return 429 status with retry-after header when rate limited"
      priority: MUST
      validation:
        type: integration_test
    
    - id: FR-003
      description: "The API MUST prevent duplicate payment processing with same idempotency key"
      priority: MUST
      validation:
        type: integration_test
    
    - id: FR-004
      description: "The API MUST implement exponential backoff for client retries"
      priority: MUST
      validation:
        type: integration_test
    
    - id: FR-005
      description: "The API MUST store idempotency keys with TTL of 24 hours"
      priority: MUST
      validation:
        type: unit_test
    
    - id: FR-006
      description: "The API MUST provide audit logging for all payment attempts"
      priority: MUST
      validation:
        type: integration_test
    
    - id: FR-007
      description: "The API MUST handle concurrent requests with same idempotency key"
      priority: MUST
      validation:
        type: integration_test
    
    - id: FR-008
      description: "The API SHOULD implement per-user rate limiting"
      priority: SHOULD
      validation:
        type: integration_test
    
    - id: FR-009
      description: "The API SHOULD provide detailed error messages for debugging"
      priority: SHOULD
      validation:
        type: unit_test
  
  non_functional:
    performance:
      p95_latency_ms: 150
      p99_latency_ms: 500
      throughput_rps: 1000
      cpu_limit: "2000m"
      memory_limit: "2Gi"
    
    security:
      network_egress: "ALLOW"
      secrets_in_code: "FORBIDDEN"
      authentication: "REQUIRED"
      encryption: "TLS_REQUIRED"
      input_validation: "STRICT"
    
    quality:
      max_cyclomatic_complexity: 10
      min_test_coverage: 85
      documentation_required: true
      type_hints_required: true

constraints:
  allowed_packages:
    - "redis"
    - "express"
    - "fastapi"
    - "gin"
    - "spring-boot"
    - "rate-limiter-flexible"
    - "uuid"
  
  disallowed_packages: []
  
  disallowed_syscalls:
    - "fork"
    - "exec"
  
  resource_limits:
    max_cpu_cores: 4
    max_memory_gb: 4
    max_disk_gb: 10
    max_network_bandwidth_mbps: 100
  
  time_limits:
    generation_minutes: 30
    execution_minutes: 15

artifacts:
  entrypoint: "src/main"
  dockerfile: "Dockerfile"
  healthcheck: "/health"
  config_files:
    - "config/api.yaml"
    - "config/ratelimit.yaml"

tests:
  unit: "tests/unit/"
  integration: "tests/integration/"
  performance: "tests/performance/"
  security: "tests/security/"
  test_data:
    input_files:
      - "test_data/payment_requests.json"
    expected_outputs:
      - "test_data/expected/responses.json"
      - "test_data/expected/audit_logs.json"

metrics:
  weights:
    functional_coverage: 0.35
    pass_rate: 0.30
    performance: 0.20
    code_quality: 0.10
    security: 0.05
  
  thresholds:
    min_functional_coverage: 90
    min_pass_rate: 95
    min_performance_score: 85

pass_criteria:
  min_total_score: 0.80
  mandatory_requirements:
    - "FR-001"
    - "FR-002"
    - "FR-003"
    - "FR-004"
    - "FR-005"
    - "FR-007"
  forbidden_violations:
    - "critical_security"
    - "runtime_failure"
    - "duplicate_payment"

metadata:
  author: "Req2Run Team"
  created_date: "2024-01-21"
  last_modified: "2024-01-21T10:00:00Z"
  version: "1.0.0"
  tags:
    - "rate-limiting"
    - "idempotency"
    - "payment"
    - "retry"
    - "resilience"
  references:
    - title: "Stripe Idempotency"
      url: "https://stripe.com/docs/api/idempotent_requests"
    - title: "Rate Limiting Best Practices"
      url: "https://cloud.google.com/architecture/rate-limiting-strategies-techniques"
  notes: |
    This problem tests the ability to implement production-grade payment processing
    with idempotency guarantees, rate limiting, and proper retry mechanisms.