id: NET-010
title: "Reverse Proxy with Timeout, Retry, and Circuit Breaker"
difficulty: advanced
category: network_protocol
languages:
  - go
  - rust
  - python
  - nodejs

requirements:
  functional:
    - id: FR-001
      description: "The proxy MUST forward HTTP/HTTPS requests to backend services"
      priority: MUST
      validation:
        type: integration_test
    
    - id: FR-002
      description: "The proxy MUST implement configurable timeouts for backend requests"
      priority: MUST
      validation:
        type: integration_test
    
    - id: FR-003
      description: "The proxy MUST implement exponential backoff retry logic"
      priority: MUST
      validation:
        type: integration_test
    
    - id: FR-004
      description: "The proxy MUST implement circuit breaker pattern"
      priority: MUST
      validation:
        type: integration_test
    
    - id: FR-005
      description: "The proxy MUST support health checks for backend services"
      priority: MUST
      validation:
        type: integration_test
    
    - id: FR-006
      description: "The proxy MUST implement rate limiting per client"
      priority: MUST
      validation:
        type: integration_test
    
    - id: FR-007
      description: "The proxy MUST preserve original client headers (X-Forwarded-*)"
      priority: MUST
      validation:
        type: unit_test
    
    - id: FR-008
      description: "The proxy MUST maintain SLO even when backend is unstable"
      priority: MUST
      validation:
        type: performance_test
    
    - id: FR-009
      description: "The proxy SHOULD support WebSocket connections"
      priority: SHOULD
      validation:
        type: integration_test
    
    - id: FR-010
      description: "The proxy SHOULD implement request/response caching"
      priority: SHOULD
      validation:
        type: integration_test
  
  non_functional:
    performance:
      p95_latency_ms: 50
      p99_latency_ms: 200
      throughput_rps: 10000
      cpu_limit: "2000m"
      memory_limit: "2Gi"
      connection_pool_size: 1000
    
    security:
      network_egress: "ALLOW"
      secrets_in_code: "FORBIDDEN"
      authentication: "OPTIONAL"
      encryption: "TLS_REQUIRED"
      header_filtering: "REQUIRED"
    
    quality:
      max_cyclomatic_complexity: 12
      min_test_coverage: 85
      documentation_required: true
      type_hints_required: true

constraints:
  allowed_packages:
    - "net/http"
    - "tokio"
    - "hyper"
    - "aiohttp"
    - "express"
    - "fastify"
    - "circuit-breaker"
    - "retry"
  
  disallowed_packages:
    - "nginx"
    - "haproxy"
    - "envoy"
  
  disallowed_syscalls:
    - "fork"
    - "exec"
  
  resource_limits:
    max_cpu_cores: 4
    max_memory_gb: 4
    max_disk_gb: 10
    max_network_bandwidth_mbps: 1000
  
  time_limits:
    generation_minutes: 45
    execution_minutes: 20

artifacts:
  entrypoint: "src/main"
  dockerfile: "Dockerfile"
  healthcheck: "/health"
  config_files:
    - "config/proxy.yaml"
    - "config/backends.yaml"
    - "config/circuit_breaker.yaml"

tests:
  unit: "tests/unit/"
  integration: "tests/integration/"
  performance: "tests/performance/"
  chaos: "tests/chaos/"
  test_data:
    input_files:
      - "test_data/requests.json"
      - "test_data/fault_scenarios.yaml"
    expected_outputs:
      - "test_data/expected/responses.json"
      - "test_data/expected/metrics.json"

metrics:
  weights:
    functional_coverage: 0.30
    pass_rate: 0.25
    performance: 0.25
    code_quality: 0.10
    security: 0.10
  
  thresholds:
    min_functional_coverage: 90
    min_pass_rate: 95
    min_performance_score: 90

pass_criteria:
  min_total_score: 0.85
  mandatory_requirements:
    - "FR-001"
    - "FR-002"
    - "FR-003"
    - "FR-004"
    - "FR-005"
    - "FR-006"
    - "FR-008"
  forbidden_violations:
    - "critical_security"
    - "runtime_failure"
    - "slo_violation"
    - "cascading_failure"

metadata:
  author: "Req2Run Team"
  created_date: "2024-01-21"
  last_modified: "2024-01-21T10:00:00Z"
  version: "1.0.0"
  tags:
    - "proxy"
    - "circuit-breaker"
    - "retry"
    - "resilience"
    - "load-balancing"
    - "chaos-engineering"
  references:
    - title: "Circuit Breaker Pattern"
      url: "https://martinfowler.com/bliki/CircuitBreaker.html"
    - title: "Reverse Proxy Pattern"
      url: "https://www.nginx.com/resources/glossary/reverse-proxy-server/"
    - title: "Chaos Engineering"
      url: "https://principlesofchaos.org/"
  notes: |
    This problem tests the ability to implement a production-grade reverse proxy
    with resilience patterns that maintain SLO even when backend services are
    unstable or experiencing failures.