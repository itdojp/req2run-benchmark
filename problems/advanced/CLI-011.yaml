id: CLI-011
title: "Parallel Job Orchestrator with DAG Execution"
difficulty: advanced
category: cli_tool
languages:
  - python
  - go
  - rust
  - javascript
  - java

requirements:
  functional:
    - id: FR-001
      description: "The system MUST execute jobs based on DAG dependencies"
      priority: MUST
      validation:
        type: integration_test
    
    - id: FR-002
      description: "The system MUST run independent jobs in parallel"
      priority: MUST
      validation:
        type: integration_test
    
    - id: FR-003
      description: "The system MUST detect and prevent circular dependencies"
      priority: MUST
      validation:
        type: unit_test
    
    - id: FR-004
      description: "The system MUST support job retry with exponential backoff"
      priority: MUST
      validation:
        type: integration_test
    
    - id: FR-005
      description: "The system MUST provide real-time job status updates"
      priority: MUST
      validation:
        type: integration_test
    
    - id: FR-006
      description: "The system MUST support job cancellation and cleanup"
      priority: MUST
      validation:
        type: integration_test
    
    - id: FR-007
      description: "The system MUST implement resource pooling and limits"
      priority: MUST
      validation:
        type: integration_test
    
    - id: FR-008
      description: "The system MUST support conditional job execution"
      priority: SHOULD
      validation:
        type: integration_test
    
    - id: FR-009
      description: "The system SHOULD provide job execution history"
      priority: SHOULD
      validation:
        type: integration_test
    
    - id: FR-010
      description: "The system MAY support distributed execution"
      priority: MAY
      validation:
        type: integration_test
  
  non_functional:
    performance:
      p95_latency_ms: 100
      p99_latency_ms: 500
      throughput_rps: 1000
      cpu_limit: "4000m"
      memory_limit: "2Gi"
      max_parallel_jobs: 100
    
    security:
      network_egress: "ALLOW"
      secrets_in_code: "FORBIDDEN"
      authentication: "OPTIONAL"
      encryption: "TLS_OPTIONAL"
      job_isolation: "REQUIRED"
    
    quality:
      max_cyclomatic_complexity: 12
      min_test_coverage: 85
      documentation_required: true
      type_hints_required: true

constraints:
  allowed_packages:
    - "celery"
    - "dask"
    - "ray"
    - "airflow"
    - "prefect"
    - "dagster"
    - "temporal"
    - "argo"
  
  disallowed_packages: []
  
  disallowed_syscalls: []
  
  resource_limits:
    max_cpu_cores: 8
    max_memory_gb: 4
    max_disk_gb: 20
    max_network_bandwidth_mbps: 200
  
  time_limits:
    generation_minutes: 40
    execution_minutes: 20

artifacts:
  entrypoint: "src/main"
  dockerfile: "Dockerfile"
  healthcheck: "/health"
  config_files:
    - "config/orchestrator.yaml"
    - "config/jobs.yaml"
    - "config/resources.yaml"

tests:
  unit: "tests/unit/"
  integration: "tests/integration/"
  performance: "tests/performance/"
  test_data:
    input_files:
      - "test_data/dag_definitions.yaml"
      - "test_data/job_scripts/"
    expected_outputs:
      - "test_data/expected/execution_order.json"
      - "test_data/expected/job_results.json"

metrics:
  weights:
    functional_coverage: 0.35
    pass_rate: 0.25
    performance: 0.25
    code_quality: 0.10
    security: 0.05
  
  thresholds:
    min_functional_coverage: 90
    min_pass_rate: 95
    min_performance_score: 85

pass_criteria:
  min_total_score: 0.85
  mandatory_requirements:
    - "FR-001"
    - "FR-002"
    - "FR-003"
    - "FR-004"
    - "FR-005"
    - "FR-006"
    - "FR-007"
  forbidden_violations:
    - "critical_security"
    - "runtime_failure"
    - "deadlock"
    - "resource_leak"

metadata:
  author: "Req2Run Team"
  created_date: "2024-01-21"
  last_modified: "2024-01-21T11:00:00Z"
  version: "1.0.0"
  tags:
    - "orchestrator"
    - "dag"
    - "parallel"
    - "job-scheduler"
    - "workflow"
    - "cli"
  references:
    - title: "DAG Scheduling"
      url: "https://en.wikipedia.org/wiki/Directed_acyclic_graph"
    - title: "Job Orchestration"
      url: "https://www.prefect.io/guide/blog/job-orchestration/"
  notes: |
    This problem tests the ability to implement a job orchestration system
    with DAG-based execution, parallel processing, and resource management.