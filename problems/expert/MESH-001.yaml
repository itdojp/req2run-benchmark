id: MESH-001
title: "Service Mesh Control Plane"
difficulty: expert
category: service_mesh
languages:
  - go
  - rust
  - cpp

requirements:
  functional:
    - id: FR-001
      description: "The mesh MUST implement mTLS between all services"
      priority: MUST
      validation:
        type: integration_test
    
    - id: FR-002
      description: "The mesh MUST provide traffic management (routing, load balancing, circuit breaking)"
      priority: MUST
      validation:
        type: integration_test
    
    - id: FR-003
      description: "The mesh MUST implement distributed tracing with correlation IDs"
      priority: MUST
      validation:
        type: integration_test
    
    - id: FR-004
      description: "The mesh MUST support canary deployments and traffic splitting"
      priority: MUST
      validation:
        type: integration_test
    
    - id: FR-005
      description: "The mesh MUST provide service discovery and health checking"
      priority: MUST
      validation:
        type: integration_test
    
    - id: FR-006
      description: "The mesh MUST implement retry policies with exponential backoff"
      priority: MUST
      validation:
        type: unit_test
    
    - id: FR-007
      description: "The mesh MUST support policy enforcement (rate limiting, access control)"
      priority: MUST
      validation:
        type: integration_test
    
    - id: FR-008
      description: "The mesh MUST provide observability (metrics, logs, traces)"
      priority: MUST
      validation:
        type: integration_test
    
    - id: FR-009
      description: "The mesh SHOULD support multi-cluster deployments"
      priority: SHOULD
      validation:
        type: integration_test
    
    - id: FR-010
      description: "The mesh SHOULD implement fault injection for testing"
      priority: SHOULD
      validation:
        type: integration_test
    
    - id: FR-011
      description: "The mesh MAY support WebAssembly plugins for extensibility"
      priority: MAY
      validation:
        type: unit_test
  
  non_functional:
    performance:
      p95_latency_ms: 5
      p99_latency_ms: 10
      throughput_rps: 50000
      cpu_limit: "2000m"
      memory_limit: "2Gi"
      proxy_overhead_percent: 5
      control_plane_latency_ms: 100
    
    security:
      network_egress: "ALLOW"
      secrets_in_code: "FORBIDDEN"
      authentication: "REQUIRED"
      encryption: "TLS_REQUIRED"
      mtls_enforcement: "REQUIRED"
      certificate_rotation: "AUTOMATIC"
    
    quality:
      max_cyclomatic_complexity: 15
      min_test_coverage: 85
      documentation_required: true
      type_hints_required: true

constraints:
  allowed_packages:
    - "envoy"
    - "istio"
    - "linkerd"
    - "consul"
    - "grpc"
    - "protobuf"
    - "opentelemetry"
    - "prometheus"
    - "spiffe"
  
  disallowed_packages:
    - "istio-operator"
    - "linkerd-control-plane"
  
  disallowed_syscalls:
    - "ptrace"
  
  resource_limits:
    max_cpu_cores: 4
    max_memory_gb: 8
    max_disk_gb: 20
    max_network_bandwidth_mbps: 1000
  
  time_limits:
    generation_minutes: 60
    execution_minutes: 30

artifacts:
  entrypoint: "cmd/control-plane/main.go"
  dockerfile: "Dockerfile"
  healthcheck: "/healthz"
  config_files:
    - "config/mesh.yaml"
    - "config/policies.yaml"
    - "config/traffic.yaml"

tests:
  unit: "tests/unit/"
  integration: "tests/integration/"
  performance: "tests/performance/"
  security: "tests/security/"
  property: "tests/property/"
  test_data:
    input_files:
      - "test_data/services.yaml"
      - "test_data/traffic_rules.yaml"
      - "test_data/policies.yaml"
    expected_outputs:
      - "test_data/expected/routing_decisions.json"
      - "test_data/expected/metrics.json"

metrics:
  weights:
    functional_coverage: 0.35
    pass_rate: 0.25
    performance: 0.20
    code_quality: 0.10
    security: 0.10
  
  thresholds:
    min_functional_coverage: 90
    min_pass_rate: 95
    min_performance_score: 85

pass_criteria:
  min_total_score: 0.85
  mandatory_requirements:
    - "FR-001"
    - "FR-002"
    - "FR-003"
    - "FR-004"
    - "FR-005"
    - "FR-006"
    - "FR-007"
  forbidden_violations:
    - "critical_security"
    - "runtime_failure"
    - "sandbox_escape"
    - "certificate_compromise"
    - "traffic_hijacking"

metadata:
  author: "Req2Run Team"
  created_date: "2024-01-20"
  last_modified: "2024-01-20T10:00:00Z"
  version: "1.0.0"
  tags:
    - "service-mesh"
    - "microservices"
    - "mtls"
    - "traffic-management"
    - "observability"
    - "cloud-native"
  references:
    - title: "Service Mesh Interface Specification"
      url: "https://smi-spec.io/"
    - title: "Envoy Proxy Architecture"
      url: "https://www.envoyproxy.io/docs/envoy/latest/intro/architecture_overview"
    - title: "SPIFFE Specification"
      url: "https://spiffe.io/docs/latest/spiffe-about/overview/"
  notes: |
    This problem tests the ability to implement a production-grade service mesh control plane
    with mTLS, traffic management, observability, and policy enforcement capabilities for
    microservices architectures.